import streamlit as st
st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600;700&display=swap');

html, body, [class*="css"], [data-testid], .stApp, .main, 
div, span, p, h1, h2, h3, h4, h5, h6, label, button, input {
    font-family: 'Kanit', 'Sarabun', 'Prompt', sans-serif !important;
    line-height: 1.6 !important;
}

/* ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Plotly charts */
.plotly * {
    font-family: 'Kanit', sans-serif !important;
}
</style>
""", unsafe_allow_html=True)
import pandas as pd
from prophet import Prophet
import plotly.graph_objects as go
import plotly.express as px
import numpy as np
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import warnings
warnings.filterwarnings('ignore')

# --- 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ---
st.set_page_config(
    page_title="Time Series Forecasting",
    page_icon="üñ•Ô∏è",
    layout="wide"
)

st.title("üê≥ ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡πÄ‡∏ß‡∏•‡∏≤ (Time Series Forecasting)")
st.write("‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏£‡∏Ñ‡πÑ‡∏Ç‡πâ‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Facebook Prophet")

# --- 2. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ---
st.subheader("üìä ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# ‡πÉ‡∏ä‡πâ session state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
if 'current_data' not in st.session_state:
    st.session_state.current_data = None
if 'data_source' not in st.session_state:
    st.session_state.data_source = "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"
if 'external_factors_enabled' not in st.session_state:
    st.session_state.external_factors_enabled = False

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
data_source = st.radio(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:",
    ["üìä Google Sheets (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)", "üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV", "üéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"],
    help="Google Sheets ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö real-time"
)

# === ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: Google Sheets ===
if data_source == "üìä Google Sheets (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)":
    st.markdown("### üåê ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets")
    
    # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets
    with st.expander("üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π)"):
        st.markdown("""
        **‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Google Sheets**
        1. ‡πÄ‡∏õ‡∏¥‡∏î Google Sheets ‡πÉ‡∏´‡∏°‡πà: [sheets.google.com](https://sheets.google.com)
        2. ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:
           ```
           A1: end_date    B1: cases    C1: week_num
           A2: 10/01/2021  B2: 125      C2: 1
           A3: 17/01/2021  B3: 134      C3: 2
           ```
        3. **(‡πÄ‡∏™‡∏£‡∏¥‡∏°)** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å:
           ```
           D1: temperature  E1: humidity  F1: holiday_flag  G1: campaign
           D2: 25.5         E2: 75        F2: 0             G2: 0
           ```
        
        **‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÅ‡∏ä‡∏£‡πå Google Sheets**
        1. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "Share" ‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô
        2. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô "Restricted" ‡πÄ‡∏õ‡πá‡∏ô **"Anyone with the link"**
        3. ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏õ‡πá‡∏ô **"Viewer"** ‡∏´‡∏£‡∏∑‡∏≠ **"Editor"**
        4. ‡∏Ñ‡∏•‡∏¥‡∏Å "Copy link"
        
        **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡πÉ‡∏ä‡πâ 'holiday_flag' ‡πÅ‡∏ó‡∏ô 'holidays' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏±‡∏ö Prophet
        """)
    
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á URL
    st.info("üí° **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Google Sheets URL:**\n`https://docs.google.com/spreadsheets/d/1ABC123.../edit?usp=sharing`")
    
    # Input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Sheets URL
    sheets_url = st.text_input(
        "üîó URL ‡∏Ç‡∏≠‡∏á Google Sheets:",
        placeholder="‡∏ß‡∏≤‡∏á Google Sheets URL ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...",
        help="URL ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö public (Anyone with link can view)"
    )
    
    if sheets_url:
        try:
            # ‡πÅ‡∏õ‡∏•‡∏á Google Sheets URL ‡πÄ‡∏õ‡πá‡∏ô CSV export URL
            if "docs.google.com/spreadsheets" in sheets_url:
                # ‡∏î‡∏∂‡∏á spreadsheet ID
                if "/d/" in sheets_url:
                    sheet_id = sheets_url.split("/d/")[1].split("/")[0]
                    csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid=0"
                    
                    with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets..."):
                        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets
                        df_sheets = pd.read_csv(csv_url)
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                        required_columns = ['end_date', 'cases', 'week_num']
                        missing_columns = [col for col in required_columns if col not in df_sheets.columns]
                        
                        if missing_columns:
                            st.error(f"‚ùå Google Sheets ‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {', '.join(missing_columns)}")
                        else:
                            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                            df_sheets['end_date'] = pd.to_datetime(df_sheets['end_date'], format='%d/%m/%Y', errors='coerce')
                            df_sheets['cases'] = pd.to_numeric(df_sheets['cases'], errors='coerce')
                            df_sheets['week_num'] = pd.to_numeric(df_sheets['week_num'], errors='coerce')
                            
                            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå)
                            external_cols = ['temperature', 'humidity', 'holiday_flag', 'campaign', 'outbreak_index', 
                                           'population_density', 'school_closed', 'tourists']
                            
                            # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á 'holidays' ‡πÅ‡∏•‡∏∞ 'holiday_flag' 
                            if 'holidays' in df_sheets.columns and 'holiday_flag' not in df_sheets.columns:
                                df_sheets['holiday_flag'] = df_sheets['holidays']
                                df_sheets.drop('holidays', axis=1, inplace=True)
                                st.info("‚ÑπÔ∏è ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'holidays' ‡πÄ‡∏õ‡πá‡∏ô 'holiday_flag' ‡πÅ‡∏•‡πâ‡∏ß")
                            
                            for col in external_cols:
                                if col in df_sheets.columns:
                                    df_sheets[col] = pd.to_numeric(df_sheets[col], errors='coerce')
                            
                            # ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
                            df_sheets = df_sheets.dropna(subset=required_columns).reset_index(drop=True)
                            
                            if len(df_sheets) > 0:
                                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                                df_sheets = df_sheets.sort_values('end_date').reset_index(drop=True)
                                
                                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ external factors ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                                has_external = any(col in df_sheets.columns for col in external_cols)
                                
                                # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô session state
                                st.session_state.current_data = df_sheets
                                st.session_state.data_source = "Google Sheets"
                                st.session_state.external_factors_enabled = has_external
                                
                                st.success(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! {len(df_sheets)} ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå")
                                
                                if has_external:
                                    available_factors = [col for col in external_cols if col in df_sheets.columns]
                                    st.info(f"üåç ‡∏û‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å: {', '.join(available_factors)}")
                                
                                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                                col1, col2, col3 = st.columns(3)
                                with col1:
                                    st.metric("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", f"{df_sheets['end_date'].min().strftime('%d/%m/%Y')} - {df_sheets['end_date'].max().strftime('%d/%m/%Y')}")
                                with col2:
                                    st.metric("‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{df_sheets['cases'].mean():.1f}")
                                with col3:
                                    st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", len(df_sheets))
                                
                                # ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                                if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets"):
                                    st.rerun()
                                    
                            else:
                                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô Google Sheets")
                else:
                    st.error("‚ùå URL ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ URL ‡∏Ç‡∏≠‡∏á Google Sheets")
            else:
                st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á Google Sheets")
                
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡πÑ‡∏î‡πâ: {str(e)}")
            st.info("üí° **‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:**\n- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ URL ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô 'Anyone with link'\n- ‡∏•‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö")

# === ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ===
elif data_source == "üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV":
    st.markdown("### üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
    with st.expander("üìã ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"):
        st.markdown("""
        **‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô):**
        ```csv
        end_date,cases,week_num
        07/01/2024,120,1
        14/01/2024,135,2
        21/01/2024,98,3
        ```
        
        **‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å (‡πÄ‡∏™‡∏£‡∏¥‡∏°):**
        ```csv
        end_date,cases,week_num,temperature,humidity,holiday_flag,campaign
        07/01/2024,120,1,25.5,75,0,0
        14/01/2024,135,2,23.2,82,1,0
        21/01/2024,98,3,28.1,68,0,1
        ```
        
        **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡πÉ‡∏ä‡πâ 'holiday_flag' ‡πÅ‡∏ó‡∏ô 'holidays' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏±‡∏ö Prophet
        """)
    
    uploaded_file = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV",
        type=['csv'],
        help="‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: end_date, cases, week_num (+ ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)"
    )
    
    if uploaded_file is not None:
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV
            df_uploaded = pd.read_csv(uploaded_file)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            required_columns = ['end_date', 'cases', 'week_num']
            missing_columns = [col for col in required_columns if col not in df_uploaded.columns]
            
            if missing_columns:
                st.error(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {', '.join(missing_columns)}")
            else:
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                df_uploaded['end_date'] = pd.to_datetime(df_uploaded['end_date'], format='%d/%m/%Y', errors='coerce')
                df_uploaded['cases'] = pd.to_numeric(df_uploaded['cases'], errors='coerce')
                df_uploaded['week_num'] = pd.to_numeric(df_uploaded['week_num'], errors='coerce')
                
                # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå)
                external_cols = ['temperature', 'humidity', 'holiday_flag', 'campaign', 'outbreak_index', 
                               'population_density', 'school_closed', 'tourists']
                
                # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á 'holidays' ‡πÅ‡∏•‡∏∞ 'holiday_flag'
                if 'holidays' in df_uploaded.columns and 'holiday_flag' not in df_uploaded.columns:
                    df_uploaded['holiday_flag'] = df_uploaded['holidays']
                    df_uploaded.drop('holidays', axis=1, inplace=True)
                    st.info("‚ÑπÔ∏è ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'holidays' ‡πÄ‡∏õ‡πá‡∏ô 'holiday_flag' ‡πÅ‡∏•‡πâ‡∏ß")
                
                for col in external_cols:
                    if col in df_uploaded.columns:
                        df_uploaded[col] = pd.to_numeric(df_uploaded[col], errors='coerce')
                
                # ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
                df_uploaded = df_uploaded.dropna(subset=required_columns).reset_index(drop=True)
                
                if len(df_uploaded) > 0:
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                    df_uploaded = df_uploaded.sort_values('end_date').reset_index(drop=True)
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ external factors ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    has_external = any(col in df_uploaded.columns for col in external_cols)
                    
                    # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô session state
                    st.session_state.current_data = df_uploaded
                    st.session_state.data_source = f"‡πÑ‡∏ü‡∏•‡πå: {uploaded_file.name}"
                    st.session_state.external_factors_enabled = has_external
                    
                    st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! {len(df_uploaded)} ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå")
                    
                    if has_external:
                        available_factors = [col for col in external_cols if col in df_uploaded.columns]
                        st.info(f"üåç ‡∏û‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å: {', '.join(available_factors)}")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", f"{df_uploaded['end_date'].min().strftime('%d/%m/%Y')} - {df_uploaded['end_date'].max().strftime('%d/%m/%Y')}")
                    with col2:
                        st.metric("‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{df_uploaded['cases'].mean():.1f}")
                    with col3:
                        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", len(df_uploaded))
                else:
                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå")
                    
        except Exception as e:
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {str(e)}")

# === ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ===
else:  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    st.markdown("### üéØ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    sample_type = st.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:",
        ["üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (52 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)", "üåç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å (52 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)"],
        help="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"
    )
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    dates = pd.date_range(start='2024-01-07', end='2024-12-29', freq='W')
    cases = []
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ pattern
    for i, date in enumerate(dates):
        week_of_year = date.isocalendar()[1]
        # seasonal pattern (‡∏´‡∏ô‡∏≤‡∏ß‡πÄ‡∏¢‡∏≠‡∏∞ ‡∏£‡πâ‡∏≠‡∏ô‡∏ô‡πâ‡∏≠‡∏¢)
        seasonal = 80 + 30 * np.sin(2 * np.pi * (week_of_year - 10) / 52)
        # trend (‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
        trend = -0.2 * i
        # noise
        noise = np.random.normal(0, 8)
        cases.append(max(10, int(seasonal + trend + noise)))
    
    if sample_type == "üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (52 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)":
        df_sample = pd.DataFrame({
            'end_date': dates,
            'cases': cases,
            'week_num': range(1, len(dates) + 1)
        })
        st.session_state.external_factors_enabled = False
    else:
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
        temperatures = []
        humidities = []
        holiday_flags = []  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å holidays ‡πÄ‡∏õ‡πá‡∏ô holiday_flags
        campaigns = []
        
        for i, date in enumerate(dates):
            week_of_year = date.isocalendar()[1]
            # ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (‡∏´‡∏ô‡∏≤‡∏ß‡πÄ‡∏¢‡πá‡∏ô ‡∏£‡πâ‡∏≠‡∏ô‡∏£‡πâ‡∏≠‡∏ô)
            temp = 26 + 6 * np.sin(2 * np.pi * (week_of_year - 10) / 52) + np.random.normal(0, 2)
            temperatures.append(round(temp, 1))
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô (‡∏°‡∏£‡∏™‡∏∏‡∏°‡∏ä‡∏∑‡πâ‡∏ô ‡πÅ‡∏•‡πâ‡∏á‡πÅ‡∏´‡πâ‡∏á)
            humidity = 70 + 15 * np.sin(2 * np.pi * (week_of_year - 20) / 52) + np.random.normal(0, 5)
            humidities.append(max(40, min(95, int(humidity))))
            
            # ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î (‡∏™‡∏∏‡πà‡∏°‡∏ö‡∏≤‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)
            holiday = 1 if week_of_year in [1, 2, 13, 14, 31, 32, 52] else 0
            holiday_flags.append(holiday)
            
            # ‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç (‡∏ö‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á)
            campaign = 1 if week_of_year in range(20, 25) or week_of_year in range(45, 50) else 0
            campaigns.append(campaign)
        
        df_sample = pd.DataFrame({
            'end_date': dates,
            'cases': cases,
            'week_num': range(1, len(dates) + 1),
            'temperature': temperatures,
            'humidity': humidities,
            'holiday_flag': holiday_flags,  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å holidays
            'campaign': campaigns,
            'outbreak_index': np.random.uniform(0.1, 0.8, len(dates)).round(2),
            'population_density': [1250] * len(dates),
            'school_closed': [0 if week_of_year not in [14, 15, 16] else 1 for week_of_year in [date.isocalendar()[1] for date in dates]],
            'tourists': np.random.randint(8000, 20000, len(dates))
        })
        st.session_state.external_factors_enabled = True
    
    # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô session state
    st.session_state.current_data = df_sample
    st.session_state.data_source = f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {sample_type.split(' ')[0][2:]}"
    
    if st.session_state.external_factors_enabled:
        st.info("üåç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏£‡∏ß‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å: ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô, ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î, ‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç, ‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏î, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£, ‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô, ‡∏ô‡∏±‡∏Å‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß")

# ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô session state
if st.session_state.current_data is not None:
    df = st.session_state.current_data.copy()
    st.info(f"üîÑ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: **{st.session_state.data_source}**")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    with st.expander("‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
        st.dataframe(df.head(10))
        
    # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if st.button("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà"):
        st.session_state.current_data = None
        st.session_state.data_source = "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"
        st.session_state.external_factors_enabled = False
        st.rerun()
else:
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô")
    st.stop()

# === ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ===
st.subheader("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
col1, col2, col3, col4 = st.columns(4)
with col1:
    st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", len(df))
with col2:
    st.metric("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", f"{df['week_num'].min()}-{df['week_num'].max()}")
with col3:
    st.metric("‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{df['cases'].mean():.1f} ‡∏£‡∏≤‡∏¢")
with col4:
    st.metric("‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", f"{(df['end_date'].max() - df['end_date'].min()).days // 7} ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå")

# ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
data_quality_issues = []

# 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
if len(df) < 8:
    data_quality_issues.append({
        'type': 'insufficient_data',
        'severity': 'warning',
        'message': f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á {len(df)} ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)",
        'suggestion': "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥"
    })

# 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (Outliers)
Q1 = df['cases'].quantile(0.25)
Q3 = df['cases'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

outliers = df[(df['cases'] < lower_bound) | (df['cases'] > upper_bound)]
if len(outliers) > 0:
    data_quality_issues.append({
        'type': 'outliers',
        'severity': 'warning',
        'message': f"‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ {len(outliers)} ‡∏à‡∏∏‡∏î",
        'details': outliers[['week_num', 'end_date', 'cases']].copy(),
        'suggestion': f"‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà {', '.join(map(str, outliers['week_num'].values))} - ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏∞‡∏ö‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
    })

# 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏•‡∏ö
zero_negative = df[df['cases'] <= 0]
if len(zero_negative) > 0:
    data_quality_issues.append({
        'type': 'zero_negative',
        'severity': 'error',
        'message': f"‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏•‡∏ö {len(zero_negative)} ‡∏à‡∏∏‡∏î",
        'details': zero_negative[['week_num', 'end_date', 'cases']].copy(),
        'suggestion': "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ö‡∏ß‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á"
    })

# 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
week_gaps = []
for i in range(1, len(df)):
    if df.iloc[i]['week_num'] - df.iloc[i-1]['week_num'] > 1:
        week_gaps.append((df.iloc[i-1]['week_num'], df.iloc[i]['week_num']))

if week_gaps:
    data_quality_issues.append({
        'type': 'missing_weeks',
        'severity': 'warning',
        'message': f"‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå {len(week_gaps)} ‡∏à‡∏∏‡∏î",
        'details': week_gaps,
        'suggestion': "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö week_num ‡πÉ‡∏´‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏±‡∏ô"
    })

# 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Sudden jumps)
df_sorted = df.sort_values('week_num').copy()
df_sorted['cases_diff'] = df_sorted['cases'].diff().abs()
mean_diff = df_sorted['cases_diff'].mean()
std_diff = df_sorted['cases_diff'].std()
sudden_jumps = df_sorted[df_sorted['cases_diff'] > mean_diff + 2 * std_diff]

if len(sudden_jumps) > 0:
    data_quality_issues.append({
        'type': 'sudden_jumps',
        'severity': 'info',
        'message': f"‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏∞‡∏ó‡∏±‡∏ô‡∏´‡∏±‡∏ô {len(sudden_jumps)} ‡∏à‡∏∏‡∏î",
        'details': sudden_jumps[['week_num', 'end_date', 'cases', 'cases_diff']].copy(),
        'suggestion': "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏î) ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"
    })

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
if data_quality_issues:
    st.subheader("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    # ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° severity
    errors = [issue for issue in data_quality_issues if issue['severity'] == 'error']
    warnings = [issue for issue in data_quality_issues if issue['severity'] == 'warning']
    infos = [issue for issue in data_quality_issues if issue['severity'] == 'info']
    
    # ‡πÅ‡∏™‡∏î‡∏á Errors (‡∏™‡∏µ‡πÅ‡∏î‡∏á)
    if errors:
        for issue in errors:
            st.error(f"‚ùå **{issue['message']}**")
            st.write(f"üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** {issue['suggestion']}")
            
            if 'details' in issue:
                if isinstance(issue['details'], pd.DataFrame):
                    st.write("üìã **‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:**")
                    st.dataframe(issue['details'], use_container_width=True)
                elif isinstance(issue['details'], list):
                    for detail in issue['details']:
                        st.write(f"- {detail}")
            st.write("---")
    
    # ‡πÅ‡∏™‡∏î‡∏á Warnings (‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á)
    if warnings:
        for issue in warnings:
            st.warning(f"‚ö†Ô∏è **{issue['message']}**")
            st.write(f"üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** {issue['suggestion']}")
            
            if 'details' in issue:
                if isinstance(issue['details'], pd.DataFrame):
                    st.write("üìã **‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥:**")
                    
                    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô outliers ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                    if issue['type'] == 'outliers':
                        details_with_stats = issue['details'].copy()
                        details_with_stats['‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥'] = details_with_stats['cases'].apply(
                            lambda x: f"{'üî∫ ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥' if x > upper_bound else 'üîª ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥'} ({x:.0f} vs ‡∏õ‡∏Å‡∏ï‡∏¥ {lower_bound:.0f}-{upper_bound:.0f})"
                        )
                        st.dataframe(details_with_stats, use_container_width=True)
                    else:
                        st.dataframe(issue['details'], use_container_width=True)
                        
                elif isinstance(issue['details'], list):
                    for detail in issue['details']:
                        if isinstance(detail, tuple):
                            st.write(f"- ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà {detail[0]} ‚Üí {detail[1]} (‡∏Ç‡∏≤‡∏î {detail[1] - detail[0] - 1} ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)")
                        else:
                            st.write(f"- {detail}")
            st.write("---")
    
    # ‡πÅ‡∏™‡∏î‡∏á Info (‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô)
    if infos:
        for issue in infos:
            st.info(f"‚ÑπÔ∏è **{issue['message']}**")
            st.write(f"üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** {issue['suggestion']}")
            
            if 'details' in issue:
                if isinstance(issue['details'], pd.DataFrame):
                    st.write("üìã **‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:**")
                    st.dataframe(issue['details'], use_container_width=True)
            st.write("---")
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏ß‡∏°
    if errors:
        st.error("üö® **‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç** - ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥")
    elif warnings:
        st.warning("‚ö†Ô∏è **‡∏û‡∏ö‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö** - ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á")
    else:
        st.success("‚úÖ **‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏µ** - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")
else:
    st.success("‚úÖ **‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏µ‡∏°‡∏≤‡∏Å** - ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥")

# ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
if len(df) > 0:
    st.subheader("üìà ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Box plot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π outliers
        fig_box = go.Figure()
        fig_box.add_trace(go.Box(
            y=df['cases'],
            name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢',
            boxpoints='outliers',
            marker_color='lightblue'
        ))
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        fig_box.add_hline(
            y=df['cases'].mean(), 
            line_dash="dash", 
            line_color="red",
            annotation_text=f"‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {df['cases'].mean():.1f}"
        )
        
        fig_box.update_layout(
            title="Box Plot: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (‡∏£‡∏≤‡∏¢)",
            height=400
        )
        st.plotly_chart(fig_box, use_container_width=True)
    
    with col2:
        # Histogram
        fig_hist = px.histogram(
            df, 
            x='cases', 
            nbins=min(20, len(df)//2),
            title="Histogram: ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            labels={'cases': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (‡∏£‡∏≤‡∏¢)', 'count': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà'}
        )
        fig_hist.update_layout(height=400)
        st.plotly_chart(fig_hist, use_container_width=True)

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å ---
if st.session_state.external_factors_enabled:
    st.subheader("üåç ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å (External Factors)")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    available_factors = []
    external_cols = ['temperature', 'humidity', 'holiday_flag', 'campaign', 'outbreak_index', 
                    'population_density', 'school_closed', 'tourists']
    
    for col in external_cols:
        if col in df.columns and not df[col].isna().all():
            available_factors.append(col)
    
    if available_factors:
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ
        selected_factors = st.multiselect(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå:",
            available_factors,
            default=available_factors,
            help="‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏£‡∏ß‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Prophet"
        )
        
        if selected_factors:
            st.success(f"‚úÖ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å: {', '.join(selected_factors)}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
            st.write("**üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å:**")
            factor_stats = df[selected_factors].describe().round(2)
            st.dataframe(factor_stats, use_container_width=True)
            
            # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
            st.write("**üîÆ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå:**")
            
            future_factors = {}
            
            for factor in selected_factors:
                col1, col2, col3 = st.columns([1, 2, 1])
                
                with col1:
                    st.write(f"**{factor}:**")
                
                with col2:
                    method = st.selectbox(
                        f"‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ {factor}",
                        ["‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", "‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á"],
                        key=f"method_{factor}"
                    )
                
                with col3:
                    if method == "‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢":
                        value = df[factor].mean()
                        st.write(f"‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {value:.2f}")
                    elif method == "‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î":
                        value = df[factor].iloc[-1]
                        st.write(f"‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {value:.2f}")
                    else:
                        value = st.number_input(
                            f"‡∏Ñ‡πà‡∏≤ {factor}",
                            value=float(df[factor].mean()),
                            key=f"custom_{factor}"
                        )
                
                future_factors[factor] = value
        else:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÉ‡∏î‡πÜ - ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
            selected_factors = []
    else:
        st.info("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
        selected_factors = []
else:
    selected_factors = []

# --- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Prophet ---
prophet_df = pd.DataFrame({
    'ds': df['end_date'],
    'y': df['cases']
})

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
for factor in selected_factors:
    prophet_df[factor] = df[factor]

prophet_df['week_num'] = df['week_num']

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ Prophet reserved names ---
def get_prophet_reserved_names():
    """‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà Prophet ‡∏à‡∏≠‡∏á‡πÑ‡∏ß‡πâ"""
    return [
        'ds', 'y', 't', 'trend', 'seasonal', 'seasonality', 
        'holidays', 'holiday', 'mcmc_samples', 'uncertainty_samples',
        'yhat', 'yhat_lower', 'yhat_upper', 'cap', 'floor',
        'additive_terms', 'multiplicative_terms', 'extra_regressors'
    ]

def validate_regressor_names(factors):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà reserved names"""
    reserved_names = get_prophet_reserved_names()
    invalid_names = [factor for factor in factors if factor in reserved_names]
    
    if invalid_names:
        return False, invalid_names
    return True, []

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
if selected_factors:
    is_valid, invalid_names = validate_regressor_names(selected_factors)
    if not is_valid:
        st.error(f"‚ùå **‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô reserved names ‡∏Ç‡∏≠‡∏á Prophet:** {', '.join(invalid_names)}")
        st.info("üí° **‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:** ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏ä‡πà‡∏ô:")
        for name in invalid_names:
            if name == 'holidays':
                st.write(f"- `{name}` ‚Üí `holiday_flag` ‡∏´‡∏£‡∏∑‡∏≠ `is_holiday`")
            else:
                st.write(f"- `{name}` ‚Üí `{name}_factor` ‡∏´‡∏£‡∏∑‡∏≠ `ext_{name}`")
        st.stop()

# --- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Prophet ---
def train_prophet_model_with_factors(data, factors):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Prophet ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å"""
    
    # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô train/test (80/20)
    split_point = int(len(data) * 0.8)
    train_data = data.iloc[:split_point]
    test_data = data.iloc[split_point:]
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Prophet
    model = Prophet(
        daily_seasonality=False,
        weekly_seasonality=True,
        yearly_seasonality=True if len(data) >= 52 else False,
        seasonality_mode='additive',
        interval_width=0.95,
        changepoint_prior_scale=0.05,
        seasonality_prior_scale=10.0
    )
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° external regressors
    factor_configs = {
        'temperature': {'prior_scale': 0.5, 'mode': 'additive'},
        'humidity': {'prior_scale': 0.3, 'mode': 'additive'},
        'holiday_flag': {'prior_scale': 1.0, 'mode': 'additive'},  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å holidays
        'campaign': {'prior_scale': 0.8, 'mode': 'multiplicative'},
        'outbreak_index': {'prior_scale': 1.5, 'mode': 'multiplicative'},
        'population_density': {'prior_scale': 0.1, 'mode': 'additive'},
        'school_closed': {'prior_scale': 0.7, 'mode': 'additive'},
        'tourists': {'prior_scale': 0.4, 'mode': 'additive'}
    }
    
    for factor in factors:
        if factor in factor_configs:
            config = factor_configs[factor]
            model.add_regressor(factor, prior_scale=config['prior_scale'], mode=config['mode'])
        else:
            # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
            model.add_regressor(factor, prior_scale=0.5, mode='additive')
    
    # ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• train
    model.fit(train_data)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• test
    if len(test_data) > 0:
        future_test = model.make_future_dataframe(periods=len(test_data), freq='W')
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö test
        for factor in factors:
            if factor in test_data.columns:
                future_test[factor] = list(train_data[factor]) + list(test_data[factor])
        
        forecast_test = model.predict(future_test)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì validation metrics
        test_actual = test_data['y'].values
        test_predicted = forecast_test.iloc[-len(test_data):]['yhat'].values
        
        validation_mae = mean_absolute_error(test_actual, test_predicted)
        validation_mape = np.mean(np.abs((test_actual - test_predicted) / test_actual)) * 100
        
        # ‡πÄ‡∏ó‡∏£‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        model_final = Prophet(
            daily_seasonality=False,
            weekly_seasonality=True,
            yearly_seasonality=True if len(data) >= 52 else False,
            seasonality_mode='additive',
            interval_width=0.95,
            changepoint_prior_scale=0.05,
            seasonality_prior_scale=10.0
        )
        
        for factor in factors:
            if factor in factor_configs:
                config = factor_configs[factor]
                model_final.add_regressor(factor, prior_scale=config['prior_scale'], mode=config['mode'])
            else:
                model_final.add_regressor(factor, prior_scale=0.5, mode='additive')
        
        model_final.fit(data)
        
        return model_final, validation_mae, validation_mape, True
    else:
        return model, None, None, False

# ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Prophet..."):
    model, val_mae, val_mape, has_validation = train_prophet_model_with_factors(prophet_df, selected_factors)

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå ---
st.header("üîÆ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢")

# ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡πâ‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
max_forecast_weeks = min(12, len(df) // 2)

weeks_to_forecast = st.slider(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤:",
    min_value=1,
    max_value=max_forecast_weeks,
    value=min(4, max_forecast_weeks),
    help=f"‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô {max_forecast_weeks} ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥"
)

if weeks_to_forecast > len(df) // 4:
    st.warning(f"‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå {weeks_to_forecast} ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏Å‡∏±‡∏î")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
future = model.make_future_dataframe(periods=weeks_to_forecast, freq='W')

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
for factor in selected_factors:
    if factor in future_factors:
        # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï
        historical_values = list(prophet_df[factor])
        # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
        future_values = [future_factors[factor]] * weeks_to_forecast
        # ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô
        future[factor] = historical_values + future_values

# ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
with st.spinner("üîÆ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå..."):
    forecast = model.predict(future)

# ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
forecast_future = forecast.tail(weeks_to_forecast).copy()

# ‡πÄ‡∏û‡∏¥‡πà‡∏° week_num ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
last_week_num = df['week_num'].max()
forecast_future['week_num'] = range(last_week_num + 1, last_week_num + weeks_to_forecast + 1)

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö Simple Baseline
recent_avg = df['cases'].tail(min(4, len(df))).mean()
baseline_forecast = [recent_avg] * weeks_to_forecast

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
forecast_mean = forecast_future['yhat'].mean()
historical_mean = df['cases'].mean()
forecast_ratio = forecast_mean / historical_mean if historical_mean > 0 else float('inf')

# ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
if forecast_ratio > 3 or forecast_ratio < 0.3:
    st.warning(f"‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏• (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á {forecast_ratio:.1f} ‡πÄ‡∏ó‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏î‡∏¥‡∏°)")

# ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
min_reasonable = max(0, historical_mean * 0.1)
max_reasonable = historical_mean * 5

forecast_future['yhat_adjusted'] = forecast_future['yhat'].clip(min_reasonable, max_reasonable)
forecast_future['yhat_upper_adjusted'] = forecast_future['yhat_upper'].clip(min_reasonable, max_reasonable)
forecast_future['yhat_lower_adjusted'] = forecast_future['yhat_lower'].clip(0, max_reasonable)

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå ---
st.subheader("üìã ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• validation ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
if has_validation:
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Validation MAE", f"{val_mae:.2f}")
    with col2:
        st.metric("Validation MAPE", f"{val_mape:.1f}%")
    with col3:
        if selected_factors:
            st.metric("External Factors", f"{len(selected_factors)} ‡∏ï‡∏±‡∏ß")
        else:
            st.metric("‡πÇ‡∏°‡πÄ‡∏î‡∏•", "‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
forecast_display_data = {
    '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà': forecast_future['week_num'].astype(int),
    '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': forecast_future['ds'].dt.strftime('%d/%m/%Y'),
    'Prophet ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå (‡∏£‡∏≤‡∏¢)': forecast_future['yhat_adjusted'].round(0).astype(int),
    'Baseline ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏£‡∏≤‡∏¢)': [int(recent_avg)] * weeks_to_forecast,
    '‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å Baseline': (forecast_future['yhat_adjusted'] - recent_avg).round(0).astype(int),
    '‡∏ä‡πà‡∏ß‡∏á‡∏ï‡πà‡∏≥ (95% CI)': forecast_future['yhat_lower_adjusted'].round(0).astype(int),
    '‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏π‡∏á (95% CI)': forecast_future['yhat_upper_adjusted'].round(0).astype(int)
}

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
if selected_factors:
    for factor in selected_factors:
        if factor in future_factors:
            forecast_display_data[f'{factor}'] = [future_factors[factor]] * weeks_to_forecast

forecast_display = pd.DataFrame(forecast_display_data)
st.dataframe(forecast_display, use_container_width=True)

# ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å baseline ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
max_diff_percent = abs((forecast_future['yhat_adjusted'] - recent_avg) / recent_avg * 100).max()
if max_diff_percent > 50:
    st.warning(f"‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å baseline ‡∏°‡∏≤‡∏Å‡∏ñ‡∏∂‡∏á {max_diff_percent:.1f}% - ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•")
elif max_diff_percent < 5:
    st.info(f"‚ÑπÔ∏è ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á baseline ({max_diff_percent:.1f}%) - ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏ô‡∏±‡∏Å")

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ---
st.subheader("üìà ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô
fig = go.Figure()

# 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
fig.add_trace(go.Scatter(
    x=df['week_num'],
    y=df['cases'],
    mode='lines+markers',
    name='‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á',
    line=dict(color='blue', width=2),
    marker=dict(size=8),
    hovertemplate='‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà: %{x}<br>‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢: %{y} ‡∏£‡∏≤‡∏¢<extra></extra>'
))

# 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
last_week = df['week_num'].max()
last_cases = df['cases'].iloc[-1]

# ‡∏à‡∏∏‡∏î‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ + ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
forecast_weeks_connected = [last_week] + list(range(last_week + 1, last_week + weeks_to_forecast + 1))
forecast_values_connected = [last_cases] + list(forecast_future['yhat_adjusted'])

fig.add_trace(go.Scatter(
    x=forecast_weeks_connected,
    y=forecast_values_connected,
    mode='lines+markers',
    name='Prophet ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå',
    line=dict(color='red', width=2),
    marker=dict(size=8, symbol='diamond'),
    hovertemplate='‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà: %{x}<br>‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå: %{y:.0f} ‡∏£‡∏≤‡∏¢<extra></extra>'
))

# 3. ‡πÄ‡∏û‡∏¥‡πà‡∏° Confidence Interval ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
ci_upper_connected = [last_cases] + list(forecast_future['yhat_upper_adjusted'])
ci_lower_connected = [last_cases] + list(forecast_future['yhat_lower_adjusted'])

fig.add_trace(go.Scatter(
    x=forecast_weeks_connected + forecast_weeks_connected[::-1],
    y=ci_upper_connected + ci_lower_connected[::-1],
    fill='toself',
    fillcolor='rgba(255,0,0,0.2)',
    line=dict(color='rgba(255,255,255,0)'),
    name='‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô 95%',
    showlegend=True,
    hoverinfo='skip'
))

# 4. ‡πÄ‡∏û‡∏¥‡πà‡∏° Baseline ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
baseline_connected = [last_cases] + baseline_forecast
fig.add_trace(go.Scatter(
    x=forecast_weeks_connected,
    y=baseline_connected,
    mode='lines+markers',
    name='Baseline (‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 4 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)',
    line=dict(color='orange', width=2, dash='dot'),
    marker=dict(size=6, symbol='square'),
    hovertemplate='‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà: %{x}<br>Baseline: %{y:.0f} ‡∏£‡∏≤‡∏¢<extra></extra>'
))

# 5. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
historical_trend = forecast[:len(df)]['yhat']
trend_connected = list(historical_trend) + list(forecast_future['yhat_adjusted'])
trend_weeks_connected = list(df['week_num']) + list(range(last_week + 1, last_week + weeks_to_forecast + 1))

fig.add_trace(go.Scatter(
    x=trend_weeks_connected,
    y=trend_connected,
    mode='lines',
    name='‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° (Prophet)',
    line=dict(color='green', dash='dash', width=1),
    opacity=0.7,
    hovertemplate='‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà: %{x}<br>‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°: %{y:.0f} ‡∏£‡∏≤‡∏¢<extra></extra>'
))

# 6. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
fig.add_vline(
    x=last_week + 0.5, 
    line_dash="solid", 
    line_color="gray",
    line_width=2,
    annotation_text="‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå",
    annotation_position="top"
)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏£‡∏≤‡∏ü
title = '‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå (Facebook Prophet'
if selected_factors:
    title += f' + {len(selected_factors)} External Factors'
title += ')'

fig.update_layout(
    title={
        'text': title,
        'x': 0.5,
        'xanchor': 'center'
    },
    xaxis_title='‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà',
    yaxis_title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (‡∏£‡∏≤‡∏¢)',
    hovermode='x unified',
    showlegend=True,
    height=600,
    font=dict(family="kanit, sans-serif", size=12),
    plot_bgcolor='white'
)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏Å‡∏ô
x_min = max(1, df['week_num'].min() - 1)
x_max = df['week_num'].max() + weeks_to_forecast + 1
fig.update_xaxes(
    range=[x_min, x_max],
    showgrid=True, 
    gridwidth=1, 
    gridcolor='lightgray',
    dtick=max(1, (x_max - x_min) // 20)
)

y_min = 0
y_max = max(df['cases'].max(), forecast_future['yhat_upper'].max()) * 1.1
fig.update_yaxes(
    range=[y_min, y_max],
    showgrid=True, 
    gridwidth=1, 
    gridcolor='lightgray'
)

st.plotly_chart(fig, use_container_width=True)

# --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• ---
try:
    # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
    historical_forecast = forecast[forecast['ds'].isin(df['end_date'])]
    
    if len(historical_forecast) == len(df):
        actual_values = df['cases'].values
        predicted_values = historical_forecast['yhat'].values
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ error metrics
        mae = mean_absolute_error(actual_values, predicted_values)
        rmse = np.sqrt(mean_squared_error(actual_values, predicted_values))
        mape = np.mean(np.abs((actual_values - predicted_values) / actual_values)) * 100
        r2 = r2_score(actual_values, predicted_values)
        
        show_metrics = True
    else:
        show_metrics = False
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
        
except Exception as e:
    show_metrics = False
    st.error(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: {e}")

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ ---
if show_metrics:
    st.subheader("üìä ‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric(
            label="MAE",
            value=f"{mae:.2f}",
            help="Mean Absolute Error - ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
        )

    with col2:
        st.metric(
            label="RMSE", 
            value=f"{rmse:.2f}",
            help="Root Mean Square Error - ‡∏£‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏¢‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≠‡∏á"
        )

    with col3:
        st.metric(
            label="MAPE",
            value=f"{mape:.1f}%",
            help="Mean Absolute Percentage Error - ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
        )

    with col4:
        st.metric(
            label="R¬≤",
            value=f"{r2:.3f}",
            help="R-squared - ‡∏Ñ‡πà‡∏≤‡∏™‡∏±‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à (0-1, ‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏Å‡∏•‡πâ 1 ‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ)"
        )

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
    if mape < 10:
        accuracy_level = "‡∏î‡∏µ‡∏°‡∏≤‡∏Å (MAPE < 10%)"
        accuracy_color = "green"
    elif mape < 20:
        accuracy_level = "‡∏î‡∏µ (MAPE 10-20%)"
        accuracy_color = "orange" 
    else:
        accuracy_level = "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á (MAPE > 20%)"
        accuracy_color = "red"

    st.info(f"**‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•**: {accuracy_level}")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü Residuals Analysis
    st.subheader("üîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Residuals")

    residuals = actual_values - predicted_values

    fig_residuals = go.Figure()

    # ‡∏Å‡∏£‡∏≤‡∏ü residuals vs predicted
    fig_residuals.add_trace(go.Scatter(
        x=predicted_values,
        y=residuals,
        mode='markers',
        name='Residuals',
        marker=dict(color='purple', size=8)
    ))

    # ‡πÄ‡∏™‡πâ‡∏ô y=0
    fig_residuals.add_hline(y=0, line_dash="dash", line_color="red")

    fig_residuals.update_layout(
        title="Residuals vs Predicted Values",
        xaxis_title="‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå",
        yaxis_title="Residuals (‡∏à‡∏£‡∏¥‡∏á - ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå)",
        height=400
    )

    st.plotly_chart(fig_residuals, use_container_width=True)

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ---
st.subheader("üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")

col1, col2 = st.columns(2)

with col1:
    st.write("**‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï:**")
    stats_df = pd.DataFrame({
        '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥': ['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢', '‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô', '‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ö‡∏µ‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô', '‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î', '‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î'],
        '‡∏Ñ‡πà‡∏≤': [
            f"{df['cases'].mean():.1f} ‡∏£‡∏≤‡∏¢",
            f"{df['cases'].median():.1f} ‡∏£‡∏≤‡∏¢", 
            f"{df['cases'].std():.1f} ‡∏£‡∏≤‡∏¢",
            f"{df['cases'].min():.0f} ‡∏£‡∏≤‡∏¢",
            f"{df['cases'].max():.0f} ‡∏£‡∏≤‡∏¢"
        ]
    })
    st.dataframe(stats_df, hide_index=True)

with col2:
    st.write("**‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå:**")
    forecast_stats_df = pd.DataFrame({
        '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥': ['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢', '‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô', '‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ö‡∏µ‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô', '‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î', '‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î'],
        '‡∏Ñ‡πà‡∏≤': [
            f"{forecast_future['yhat_adjusted'].mean():.1f} ‡∏£‡∏≤‡∏¢",
            f"{forecast_future['yhat_adjusted'].median():.1f} ‡∏£‡∏≤‡∏¢",
            f"{forecast_future['yhat_adjusted'].std():.1f} ‡∏£‡∏≤‡∏¢", 
            f"{forecast_future['yhat_adjusted'].min():.0f} ‡∏£‡∏≤‡∏¢",
            f"{forecast_future['yhat_adjusted'].max():.0f} ‡∏£‡∏≤‡∏¢"
        ]
    })
    st.dataframe(forecast_stats_df, hide_index=True)

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° ---
st.subheader("üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°")

col1, col2, col3 = st.columns(3)

with col1:
    avg_forecast = forecast_future['yhat_adjusted'].mean()
    avg_historical = df['cases'].mean()
    trend_change = ((avg_forecast - avg_historical) / avg_historical) * 100
    
    st.metric(
        label="‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢",
        value=f"{trend_change:+.1f}%",
        delta=f"{avg_forecast - avg_historical:+.1f} ‡∏£‡∏≤‡∏¢"
    )

with col2:
    first_forecast = forecast_future['yhat_adjusted'].iloc[0] 
    last_forecast = forecast_future['yhat_adjusted'].iloc[-1]
    forecast_trend = last_forecast - first_forecast
    
    st.metric(
        label="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå",
        value="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô" if forecast_trend > 0 else "‡∏•‡∏î‡∏•‡∏á" if forecast_trend < 0 else "‡∏Ñ‡∏á‡∏ó‡∏µ‡πà",
        delta=f"{forecast_trend:+.1f} ‡∏£‡∏≤‡∏¢"
    )

with col3:
    uncertainty = forecast_future['yhat_upper_adjusted'].mean() - forecast_future['yhat_lower_adjusted'].mean()
    st.metric(
        label="‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢",
        value=f"¬±{uncertainty/2:.1f} ‡∏£‡∏≤‡∏¢",
        help="‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô 95% ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"
    )

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü components ‡∏Ç‡∏≠‡∏á Prophet ---
st.subheader("üîß ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö (Trend & Seasonality)")

try:
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü trend
    fig_components = model.plot_components(forecast)
    st.pyplot(fig_components)
except Exception as e:
    st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü components ‡πÑ‡∏î‡πâ: {str(e)}")

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•
if selected_factors and show_metrics:
    st.subheader("üåç ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å")
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì feature importance (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢)
    factor_importance = {}
    
    for factor in selected_factors:
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì correlation ‡∏Å‡∏±‡∏ö residuals
        factor_values = prophet_df[factor]
        corr = np.corrcoef(factor_values, actual_values)[0, 1]
        factor_importance[factor] = abs(corr)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö
    if factor_importance:
        importance_df = pd.DataFrame([
            {'‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢': factor, '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå': f"{corr:.3f}", '‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö': '‡∏™‡∏π‡∏á' if corr > 0.3 else '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' if corr > 0.1 else '‡∏ï‡πà‡∏≥'}
            for factor, corr in factor_importance.items()
        ])
        
        st.dataframe(importance_df, use_container_width=True)

st.caption("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• Facebook Prophet ‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö pattern ‡πÅ‡∏•‡∏∞ seasonality ‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô")
if selected_factors:
    st.caption(f"‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡∏£‡∏ß‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å {len(selected_factors)} ‡∏ï‡∏±‡∏ß ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥")

# --- Sidebar Information ---
st.sidebar.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•")
st.sidebar.info("""
**Facebook Prophet Features:**
- ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö seasonality ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö holiday effects
- ‡∏°‡∏µ confidence intervals
- ‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô‡∏ï‡πà‡∏≠ missing data
- ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á trend
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö external regressors
""")

st.sidebar.subheader("üåç ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö")
st.sidebar.info("""
**‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ:**

üå°Ô∏è **‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥** - ‡πÑ‡∏Ç‡πâ‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏ö‡∏≤‡∏î‡πÉ‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏¢‡πá‡∏ô

üíß **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô** - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏£‡πà‡πÄ‡∏ä‡∏∑‡πâ‡∏≠

üè• **‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î** - ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏≤‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
   (‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ 'holiday_flag' ‡πÅ‡∏ó‡∏ô 'holidays')

üì¢ **‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç** - ‡∏Å‡∏≤‡∏£‡∏£‡∏ì‡∏£‡∏á‡∏Ñ‡πå‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏£‡πà‡πÄ‡∏ä‡∏∑‡πâ‡∏≠

ü¶† **‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏£‡∏∞‡∏ö‡∏≤‡∏î** - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á

üë• **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô** - ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏≠‡∏≠‡∏±‡∏î‡πÅ‡∏û‡∏£‡πà‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡πá‡∏ß

üè´ **‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô** - ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô

‚úàÔ∏è **‡∏ô‡∏±‡∏Å‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß** - ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏Ñ‡∏ô
""")

st.sidebar.subheader("‚ö†Ô∏è Prophet Reserved Names")
st.sidebar.warning("""
**‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏• Prophet ‡∏à‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£:**

‚ùå **‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:**
- holidays (‡πÉ‡∏ä‡πâ holiday_flag ‡πÅ‡∏ó‡∏ô)
- trend, seasonal, seasonality
- yhat, ds, y, t
- cap, floor
- uncertainty_samples

‚úÖ **‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏î‡πÅ‡∏ó‡∏ô:**
- holidays ‚Üí holiday_flag
- seasonal ‚Üí seasonal_factor  
- trend ‚Üí trend_data
""")

st.sidebar.subheader("üîç ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•")
st.sidebar.warning("""
**‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:**

1. **‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**: ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô

2. **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï

3. **Causality**: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏

**‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:**
- ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
- ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Å‡∏≤‡∏£ overfitting
""")

st.sidebar.subheader("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥")
st.sidebar.info("""
**Metrics:**
- **MAE**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
- **RMSE**: ‡∏£‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≠‡∏á
- **MAPE**: ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î  
- **R¬≤**: ‡∏Ñ‡πà‡∏≤‡∏™‡∏±‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à

**‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô MAPE:**
- < 10%: ‡∏î‡∏µ‡∏°‡∏≤‡∏Å
- 10-20%: ‡∏î‡∏µ
- > 20%: ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á

**External Factors:**
- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÑ‡∏î‡πâ 30-50%
- ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ
- ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏
""")

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
st.sidebar.subheader("üìä ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
st.sidebar.info(f"**‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å:** {st.session_state.data_source}")

if st.session_state.data_source == "Google Sheets":
    st.sidebar.success("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ö‡∏ö real-time")
elif "‡πÑ‡∏ü‡∏•‡πå:" in st.session_state.data_source:
    st.sidebar.info("üìÅ ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå")
else:
    st.sidebar.warning("üéØ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á - ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

if st.session_state.external_factors_enabled:
    st.sidebar.success(f"üåç ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å: {len(selected_factors)} ‡∏ï‡∏±‡∏ß")
else:
    st.sidebar.info("üìä ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å)")
